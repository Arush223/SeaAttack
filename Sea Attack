import pygame
import os
import time
import random

pygame.font.init()

WIDTH, HEIGHT = 756, 473
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Sea Attack!")
pygame.display.set_icon(pygame.image.load(os.path.join("Images", "Caseoh-canon-ball-nobg2.png")))

# Title Logo
TITLE_LOGO = pygame.image.load(os.path.join("Images", "Sea-Attack-Logo.png"))

# Load images
RED_SPACE_SHIP = pygame.image.load(os.path.join("Images", "red-ship-nobg.png"))  
GREEN_SPACE_SHIP = pygame.image.load(os.path.join("Images", "green-ship-nobg.png"))
BLUE_SPACE_SHIP = pygame.image.load(os.path.join("Images", "blue-ship-nobg.png"))

# Boss Ship
BOSS_SHIP = pygame.image.load(os.path.join("Images", "Boss-Ship.png")) 

# Player ship 
YELLOW_SPACE_SHIP = pygame.image.load(os.path.join("Images", "Ship3.png"))

# Lasers
RED_LASER = pygame.image.load(os.path.join("Images", "red-laser-nobg.png"))
GREEN_LASER = pygame.image.load(os.path.join("Images", "green-laser-nobg.png"))
BLUE_LASER = pygame.image.load(os.path.join("Images", "blue-laser-nobg.png"))
YELLOW_LASER = pygame.image.load(os.path.join("Images", "Caseoh-canon-ball-nobg2.png"))
BOSS_LASER = pygame.image.load(os.path.join("Images", "Boss-Laser.png"))

# Background
BG = pygame.transform.scale(pygame.image.load(os.path.join("Images", "Sea-Background.png")), (WIDTH, HEIGHT))

class Laser:
    def __init__(self, x, y, img):
        self.x = x
        self.y = y
        self.img = img
        self.mask = pygame.mask.from_surface(self.img)

    def draw(self, window):
        window.blit(self.img, (self.x, self.y))

    def move(self, vel):
        self.y += vel

    def off_screen(self, height):
        return not(self.y <= height and self.y >= 0)

    def collision(self, obj):
        return collide(self, obj)


class Ship:
    COOLDOWN = 30

    def __init__(self, x, y, health=100):
        self.x = x
        self.y = y
        self.health = health
        self.ship_img = None
        self.laser_img = None
        self.lasers = []
        self.cool_down_counter = 0

    def draw(self, window):
        window.blit(self.ship_img, (self.x, self.y))
        for laser in self.lasers:
            laser.draw(window)

    def move_lasers(self, vel, obj):
        self.cooldown()
        for laser in self.lasers:
            laser.move(vel)
            if laser.off_screen(HEIGHT):
                self.lasers.remove(laser)
            elif laser.collision(obj):
                obj.health -= 10
                self.lasers.remove(laser)

    def cooldown(self):
        if self.cool_down_counter >= self.COOLDOWN:
            self.cool_down_counter = 0
        elif self.cool_down_counter > 0:
            self.cool_down_counter += 1.1

    def shoot(self):
        if self.cool_down_counter == 0:
            laser = Laser(self.x, self.y, self.laser_img)
            self.lasers.append(laser)
            self.cool_down_counter = 1

    def get_width(self):
        return self.ship_img.get_width()

    def get_height(self):
        return self.ship_img.get_height()


class Player(Ship):
    def __init__(self, x, y, health=100):
        super().__init__(x, y, health)
        self.ship_img = YELLOW_SPACE_SHIP
        self.laser_img = YELLOW_LASER
        self.mask = pygame.mask.from_surface(self.ship_img)
        self.max_health = health

    def move_lasers(self, vel, objs):
        self.cooldown()
        for laser in self.lasers:
            laser.move(vel)
            if laser.off_screen(HEIGHT):
                self.lasers.remove(laser)
            else:
                for obj in objs:
                    if laser.collision(obj):
                        objs.remove(obj)
                        if isinstance(obj, Boss):
                            obj.health -= 10
                        if laser in self.lasers: # This line of code is how the hit is registered.
                            self.lasers.remove(laser)

    def draw(self, window):
        super().draw(window)
        self.healthbar(window)

    def healthbar(self, window):
        pygame.draw.rect(window, (255,0,0), (self.x, self.y + self.ship_img.get_height() + 10, self.ship_img.get_width(), 10))
        pygame.draw.rect(window, (0,255,0), (self.x, self.y + self.ship_img.get_height() + 10, self.ship_img.get_width() * (self.health/self.max_health), 10))


class Enemy(Ship):
    COLOR_MAP = {
                "red": (RED_SPACE_SHIP, RED_LASER),
                "green": (GREEN_SPACE_SHIP, GREEN_LASER),
                "blue": (BLUE_SPACE_SHIP, BLUE_LASER)
                }

    def __init__(self, x, y, color, health=100):
        super().__init__(x, y, health)
        self.ship_img, self.laser_img = self.COLOR_MAP[color]
        self.mask = pygame.mask.from_surface(self.ship_img)

    def move(self, vel):
        self.y += vel


    def shoot(self):
        if self.cool_down_counter == 0:
            laser = Laser(self.x+17, self.y, self.laser_img)
            self.lasers.append(laser)
            self.cool_down_counter = 1


class Boss(Ship):
    def __init__(self, x, y, health=300):
        super().__init__(x, y, health)
        self.ship_img = BOSS_SHIP
        self.laser_img = BOSS_LASER
        self.mask = pygame.mask.from_surface(self.ship_img)
        self.vel = 4  # Boss ship velocity
        self.direction = 1  # Initial direction (1 for right, -1 for left)
        self.max_health = health
        self.health = health

    def move(self):
        # Check if boss ship reaches the right edge or left edge of the screen
        if self.x + self.vel >= WIDTH - self.ship_img.get_width() or self.x + self.vel <= 0:
            self.direction *= -1  # Change direction
        self.x += self.vel * self.direction  # Move horizontally

    def healthbar(self, window):
        pygame.draw.rect(window, (255,0,0), (self.x, self.y + self.ship_img.get_height() + 10, self.ship_img.get_width(), 10))
        pygame.draw.rect(window, (0,255,0), (self.x, self.y + self.ship_img.get_height() + 10, self.ship_img.get_width() * (self.health/self.max_health), 10))

    def draw(self, window):
        window.blit(self.ship_img, (self.x, self.y))
        self.healthbar(window)
        for laser in self.lasers:
            laser.draw(window)

    def move_lasers(self, vel, obj):
        self.cooldown()
        for laser in self.lasers[:]:  # Use a copy of the list to avoid modifying it while iterating
            laser.move(vel)
            if laser.off_screen(HEIGHT):
                self.lasers.remove(laser)
            elif laser.collision(obj):
                self.lasers.remove(laser)
                obj.health -= 10
                if isinstance(obj, Player):  # Only damage player
                    obj.health -= 10


def collide(obj1, obj2):
    offset_x = obj2.x - obj1.x
    offset_y = obj2.y - obj1.y
    return obj1.mask.overlap(obj2.mask, (offset_x, offset_y)) != None

def main():
    run = True
    FPS = 60
    level = 0 
    lives = 5
    main_font = pygame.font.SysFont("impact", 30)
    lost_font = pygame.font.SysFont("impact", 60)
    boss_font = pygame.font.SysFont("impact", 60)

    enemies = []
    wave_length = 5
    enemy_vel = 1

    player_vel = 5
    laser_vel = 5

    player = Player(350, 400)

    clock = pygame.time.Clock()

    lost = False
    lost_count = 0

    def redraw_window():
        WIN.blit(BG, (0,0))
        # Draw text
        lives_label = main_font.render(f"Lives: {lives}", 1, (255,255,255))
        level_label = main_font.render(f"Level: {level}", 1, (255,255,255))
        WIN.blit(lives_label, (10, 10))
        WIN.blit(level_label, (WIDTH - level_label.get_width() - 10, 10))

        # Draw enemies
        for enemy in enemies:
            enemy.draw(WIN)

        # Draw player and boss if it's a boss level
        player.draw(WIN)
        for enemy in enemies:
            if isinstance(enemy, Boss):
                enemy.draw(WIN)
                enemy.healthbar(WIN)  # Call healthbar for the boss

        # Draw lost label if the game is lost
        if lost:
            lost_label = lost_font.render("You Lost!!", 1, (255,255,255))
            WIN.blit(lost_label, (WIDTH/2 - lost_label.get_width()/2, 350))

        pygame.display.update()

    
    def boss_level():
        nonlocal run, level, enemies, player, lives, lost, lost_count

        boss_ship = Boss(WIDTH/2 - BOSS_SHIP.get_width()/2, 0)
        enemies.append(boss_ship)

        while boss_ship.health > 0:
            clock.tick(FPS)
            redraw_window()
            # Handle events and player input
            for event in pygame.event.get():  
                if event.type == pygame.QUIT:
                    quit()
                # Handle other events if necessary
            
            keys = pygame.key.get_pressed()
            if keys[pygame.K_a] and player.x - player_vel > 0: # left
                player.x -= player_vel
            if keys[pygame.K_d] and player.x + player_vel + player.get_width() < WIDTH: # right
                player.x += player_vel
            if keys[pygame.K_w] and player.y - player_vel > 0: # up
                player.y -= player_vel
            if keys[pygame.K_s] and player.y + player_vel + player.get_height() + 15 < HEIGHT: # down
                player.y += player_vel
            if keys[pygame.K_SPACE]:
                player.shoot()

            # Update boss ship's movements and attacks
            boss_ship.move()  # Move boss ship
            boss_ship.move_lasers(laser_vel, player)
            if random.randrange(0, 2*FPS) == 1:
                boss_ship.shoot() 
            player.move_lasers(-laser_vel, [boss_ship])

            # Check for collisions with boss ship
            if collide(boss_ship, player):
                player.health -= 10

            # Check for collisions between player lasers and boss ship
            for laser in player.lasers[:]:
                if collide(laser, boss_ship):  # Use collide function instead of laser.collision
                    boss_ship.health -= 10
                    player.lasers.remove(laser)


            # Check if boss ship's health reaches zero
            if boss_ship.health <= 0:
                enemies.remove(boss_ship)
                time.sleep(1)
                win_message = boss_font.render("You Win!", 1, (255, 255, 255))
                WIN.blit(win_message, (WIDTH / 2 - win_message.get_width() / 2, 350))
                pygame.display.update()
                time.sleep(3)
                run = False
                main_menu()


        

    while run:
        clock.tick(FPS)
        redraw_window()

        if lives <= 0 or player.health <= 0:
            lost = True
            lost_count += 1

        if lost:
            if lost_count > FPS * 3:
                run = False
            else:
                continue

        if len(enemies) == 0: 
            level += 1
            if level == 6:
                boss_label = boss_font.render("Boss Level!", 1, (255,255,255))
                text_width = boss_label.get_width()
                text_height = boss_label.get_height()
                text_x = WIDTH/2 - text_width/2
                text_y = HEIGHT/2 - text_height/2
                WIN.blit(boss_label, (text_x, text_y))
                pygame.display.update()
                time.sleep(2)
                boss_level()  # Call boss level function
            else:
                wave_length += 5
                for i in range(wave_length):
                    enemy = Enemy(random.randrange(50, WIDTH-100), random.randrange(-1500, -100), random.choice(["red", "blue", "green"]))
                    enemies.append(enemy)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                quit()

        keys = pygame.key.get_pressed()
        if keys[pygame.K_a] and player.x - player_vel > 0: # left
            player.x -= player_vel
        if keys[pygame.K_d] and player.x + player_vel + player.get_width() < WIDTH: # right
            player.x += player_vel
        if keys[pygame.K_w] and player.y - player_vel > 0: # up
            player.y -= player_vel
        if keys[pygame.K_s] and player.y + player_vel + player.get_height() + 15 < HEIGHT: # down
            player.y += player_vel
        if keys[pygame.K_SPACE]:
            player.shoot()

        for enemy in enemies[:]: # this makes the ships move forward
            enemy.move(enemy_vel)
            enemy.move_lasers(laser_vel, player)

            if random.randrange(0, 2*60) == 1:
                enemy.shoot()

            if collide(enemy, player):
                player.health -= 10
                enemies.remove(enemy)
            elif enemy.y + enemy.get_height() > HEIGHT:
                lives -= 1
                enemies.remove(enemy)

        player.move_lasers(-laser_vel, enemies)

def main_menu():
    title_font = pygame.font.SysFont("impact", 30) 
    run = True
    while run:
        WIN.blit(BG, (0,0))
        WIN.blit(TITLE_LOGO, (WIDTH/2 - TITLE_LOGO.get_width()/2, 50))
        subtitle_label = title_font.render("Use WASD to move and Spacebar to shoot", 1, (153, 255, 255))
        smaller_title_label = title_font.render("If you let 5 ships get past you, you die!", 1, (204,255,255))
        title_label = title_font.render("Press space to begin...", 1, (255,255,255))
        WIN.blit(subtitle_label, (WIDTH/2 - subtitle_label.get_width()/2, HEIGHT/2 + subtitle_label.get_height()))
        WIN.blit(smaller_title_label, (WIDTH/2 - smaller_title_label.get_width()/2, HEIGHT/2 + subtitle_label.get_height() + smaller_title_label.get_height()))
        WIN.blit(title_label, (WIDTH/2 - title_label.get_width()/2, HEIGHT/2 + subtitle_label.get_height() + smaller_title_label.get_height() + title_label.get_height()))
        pygame.display.update()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    main()
    pygame.quit()

main_menu() 
